// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"fmt"
	"io/ioutil"
	"regexp"
	"strings"

	"gogo/tmp/lexer"
	"gogo/tmp/token"
)

type Node struct {
	place string
	code  []string
}

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Start	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Start : SourceFile	<< func() (Attrib, error) {
	        re := regexp.MustCompile("\n(\n)*")
                c := X[0].(Node).code
                for _, v := range c {
                        v := strings.TrimSpace(v)
                        // Compress multiple newlines within IR statemnets into
                        // a single newline.
                        v = re.ReplaceAllString(v, "\n")
                        if v != "" {
                                fmt.Println(v)
                        }
                }
                return nil, nil
        } () >>`,
		Id:         "Start",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				re := regexp.MustCompile("\n(\n)*")
				c := X[0].(Node).code
				for _, v := range c {
					v := strings.TrimSpace(v)
					// Compress multiple newlines within IR statemnets into
					// a single newline.
					v = re.ReplaceAllString(v, "\n")
					if v != "" {
						fmt.Println(v)
					}
				}
				return nil, nil
			}()
		},
	},
	ProdTabEntry{
		String: `SourceFile : PackageClause terminator RepeatTerminator RepeatImportDecl	<< func() (Attrib, error) {
                        imports := strings.Split(X[3].(Node).place, ",")
                        for _, v := range imports {
                                fmt.Println(strings.TrimSpace(v))
                        }

                        // Try generating code for the first import.
                        f := strings.Trim(imports[0], "\"")
                        src, err := ioutil.ReadFile(f)
                        if err != nil {
                                return nil, err
                        }
                        s := lexer.NewLexer(src)
                        fmt.Println(s.Scan())

                        return Node{"", X[3].(Node).code}, nil
                } () >>`,
		Id:         "SourceFile",
		NTType:     2,
		Index:      2,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				imports := strings.Split(X[3].(Node).place, ",")
				for _, v := range imports {
					fmt.Println(strings.TrimSpace(v))
				}

				// Try generating code for the first import.
				f := strings.Trim(imports[0], "\"")
				src, err := ioutil.ReadFile(f)
				if err != nil {
					return nil, err
				}
				s := lexer.NewLexer(src)
				fmt.Println(s.Scan())

				return Node{"", X[3].(Node).code}, nil
			}()
		},
	},
	ProdTabEntry{
		String: `RepeatImportDecl : ImportDecl terminator RepeatTerminator RepeatImportDecl	<< func() (Attrib, error) {
                                n := Node{"", []string{}}
                                n.place = fmt.Sprintf("%s, %s", X[0].(Node).place, X[3].(Node).place)
                                // n.code = append(n.code, X[0].(Node).code...)
                                // n.code = append(n.code, X[3].(Node).code...)
                                // n.code = append(n.code, "\n")
                                return n, nil
                        } () >>`,
		Id:         "RepeatImportDecl",
		NTType:     3,
		Index:      3,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				n := Node{"", []string{}}
				n.place = fmt.Sprintf("%s, %s", X[0].(Node).place, X[3].(Node).place)
				// n.code = append(n.code, X[0].(Node).code...)
				// n.code = append(n.code, X[3].(Node).code...)
				// n.code = append(n.code, "\n")
				return n, nil
			}()
		},
	},
	ProdTabEntry{
		String: `RepeatImportDecl : empty	<< func() (Attrib, error) {
                                n := Node{"", []string{}}
                                return n, nil
                        } () >>`,
		Id:         "RepeatImportDecl",
		NTType:     3,
		Index:      4,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				n := Node{"", []string{}}
				return n, nil
			}()
		},
	},
	ProdTabEntry{
		String: `ImportDecl : kwdImport ImportSpec	<< func() (Attrib, error) {
                        return Node{X[1].(Node).place, []string{}}, nil
                } () >>`,
		Id:         "ImportDecl",
		NTType:     4,
		Index:      5,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return Node{X[1].(Node).place, []string{}}, nil
			}()
		},
	},
	ProdTabEntry{
		String: `ImportDecl : kwdImport "(" RepeatImportSpec ")"	<< func() (Attrib, error) {
                        return Node{X[1].(Node).place, []string{}}, nil
                } () >>`,
		Id:         "ImportDecl",
		NTType:     4,
		Index:      6,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return Node{X[1].(Node).place, []string{}}, nil
			}()
		},
	},
	ProdTabEntry{
		String: `RepeatImportSpec : ImportSpec terminator RepeatImportSpec	<< func() (Attrib, error) {
                        return Node{fmt.Sprintf("%s, %s", X[0].(Node).place, X[2].(Node).place), []string{}}, nil
                } () >>`,
		Id:         "RepeatImportSpec",
		NTType:     5,
		Index:      7,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return Node{fmt.Sprintf("%s, %s", X[0].(Node).place, X[2].(Node).place), []string{}}, nil
			}()
		},
	},
	ProdTabEntry{
		String: `RepeatImportSpec : empty	<< func() (Attrib, error) {
                        return Node{"", []string{}}, nil
                } () >>`,
		Id:         "RepeatImportSpec",
		NTType:     5,
		Index:      8,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return Node{"", []string{}}, nil
			}()
		},
	},
	ProdTabEntry{
		String: `ImportSpec : ImportPath	<< func() (Attrib, error) {
                        return Node{X[0].(Node).place, []string{}}, nil
                } () >>`,
		Id:         "ImportSpec",
		NTType:     6,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return Node{X[0].(Node).place, []string{}}, nil
			}()
		},
	},
	ProdTabEntry{
		String: `ImportPath : stringLit	<< func() (Attrib, error) {
                        return Node{string(X[0].(*token.Token).Lit), []string{}}, nil
                } () >>`,
		Id:         "ImportPath",
		NTType:     7,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return Node{string(X[0].(*token.Token).Lit), []string{}}, nil
			}()
		},
	},
	ProdTabEntry{
		String: `PackageClause : kwdPackage PackageName	<< func() (Attrib, error) {
                        return Node{X[1].(Node).place, []string{}}, nil
                } () >>`,
		Id:         "PackageClause",
		NTType:     8,
		Index:      11,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return Node{X[1].(Node).place, []string{}}, nil
			}()
		},
	},
	ProdTabEntry{
		String: `PackageName : identifier	<< func() (Attrib, error) {
                        return Node{string(X[0].(*token.Token).Lit), []string{}}, nil
                } () >>`,
		Id:         "PackageName",
		NTType:     9,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return Node{string(X[0].(*token.Token).Lit), []string{}}, nil
			}()
		},
	},
	ProdTabEntry{
		String: `RepeatTerminator : terminator RepeatTerminator	<< func() (Attrib, error) {
                      return nil, nil
                } () >>`,
		Id:         "RepeatTerminator",
		NTType:     10,
		Index:      13,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return nil, nil
			}()
		},
	},
	ProdTabEntry{
		String: `RepeatTerminator : empty	<< func() (Attrib, error) {
                      return nil, nil
                } () >>`,
		Id:         "RepeatTerminator",
		NTType:     10,
		Index:      14,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return func() (Attrib, error) {
				return nil, nil
			}()
		},
	},
}
