// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"bytes"
	"compress/gzip"
	"encoding/gob"
)

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{}

func init() {
	tab := []struct {
		CanRecover bool
		Actions    []struct {
			Index  int
			Action int
			Amount int
		}
	}{}
	data := []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84, 0x90, 0xbd, 0x4b, 0x03, 0x41,
		0x14, 0xc4, 0x67, 0xf6, 0xce, 0x18, 0x8e, 0x33, 0x1c, 0x41, 0x44, 0x0e, 0x8b, 0x2d, 0x2c, 0x2c,
		0x24, 0xd8, 0x8b, 0x85, 0x58, 0xd9, 0x5a, 0x09, 0x62, 0x21, 0xe7, 0x15, 0x29, 0xbc, 0x83, 0x64,
		0x23, 0x82, 0x58, 0x18, 0xe3, 0xc7, 0x5f, 0xed, 0xfa, 0xf6, 0x6d, 0x58, 0x1b, 0x3f, 0x58, 0xb8,
		0xfb, 0xed, 0xbe, 0x99, 0x9d, 0x61, 0xb7, 0xfc, 0xbb, 0xa1, 0xf1, 0x1f, 0xa0, 0x5f, 0x02, 0x07,
		0xfe, 0x39, 0x93, 0xdd, 0x12, 0x34, 0x2c, 0xce, 0x6e, 0xba, 0x8b, 0xb6, 0xe9, 0xef, 0xdb, 0x19,
		0x0d, 0xb8, 0x79, 0xda, 0xb8, 0x69, 0xdf, 0xcd, 0xe9, 0xdf, 0x00, 0x9c, 0xf8, 0x57, 0x43, 0x4e,
		0xae, 0xae, 0xe7, 0x6e, 0xb6, 0x68, 0x9c, 0x7d, 0xb4, 0xe7, 0xdd, 0x6d, 0xfb, 0x60, 0xa7, 0x9d,
		0x3b, 0xb6, 0x51, 0xb9, 0xe6, 0xbb, 0x7e, 0xd1, 0xb9, 0xc0, 0xf6, 0x29, 0x58, 0xe9, 0x57, 0xc0,
		0xa1, 0x7f, 0x09, 0x31, 0x2b, 0x30, 0xe3, 0x86, 0x1a, 0x99, 0x83, 0x83, 0xe8, 0x8b, 0xa8, 0x36,
		0x41, 0xe0, 0x93, 0x97, 0x52, 0xaf, 0x96, 0xb8, 0x8a, 0x39, 0x87, 0x80, 0x90, 0x89, 0xdf, 0xb0,
		0x94, 0x72, 0x59, 0x85, 0xd2, 0x58, 0x68, 0x24, 0x94, 0xe9, 0x74, 0x0f, 0x3a, 0xaa, 0xc0, 0xa1,
		0xee, 0xa2, 0xd6, 0x70, 0x27, 0xd1, 0xee, 0x1f, 0x5a, 0xbd, 0x5f, 0x12, 0xe5, 0x20, 0x67, 0x9d,
		0x0e, 0xea, 0xa8, 0xa8, 0x53, 0x87, 0x3c, 0x75, 0x88, 0xae, 0x42, 0xc8, 0x82, 0x23, 0xf9, 0xed,
		0xff, 0x5b, 0xa5, 0x50, 0x4b, 0x29, 0x54, 0x7d, 0x5b, 0xe2, 0x68, 0x9c, 0x68, 0xfb, 0xa7, 0x36,
		0x31, 0x72, 0xa2, 0x54, 0x0a, 0x1d, 0xa5, 0x42, 0x83, 0xdf, 0xef, 0x2c, 0xd7, 0x72, 0x13, 0x5e,
		0xe9, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x47, 0xfa, 0xf9, 0xfd, 0x01, 0x00, 0x00,
	}
	buf, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		panic(err)
	}
	dec := gob.NewDecoder(buf)
	if err := dec.Decode(&tab); err != nil {
		panic(err)
	}

	for i, row := range tab {
		actionTab[i].canRecover = row.CanRecover
		for _, a := range row.Actions {
			switch a.Action {
			case 0:
				actionTab[i].actions[a.Index] = accept(true)
			case 1:
				actionTab[i].actions[a.Index] = reduce(a.Amount)
			case 2:
				actionTab[i].actions[a.Index] = shift(a.Amount)
			}
		}
	}
}
