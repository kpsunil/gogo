// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"bytes"
	"compress/gzip"
	"encoding/gob"
)

const numNTSymbols = 11

type (
	gotoTable [numStates]gotoRow
	gotoRow   [numNTSymbols]int
)

var gotoTab = gotoTable{}

func init() {
	tab := [][]int{}
	data := []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xe2, 0xfd, 0xdf, 0xcd, 0xc4, 0xc8,
		0xf4, 0xbf, 0x87, 0x81, 0xf1, 0x7f, 0x17, 0x03, 0x03, 0xcf, 0xff, 0x4e, 0x10, 0xaf, 0x8b, 0x81,
		0x91, 0x85, 0x81, 0xe1, 0x1f, 0xa3, 0x0d, 0x50, 0x5c, 0x8a, 0x9b, 0x91, 0x89, 0x85, 0x11, 0x04,
		0xd8, 0x18, 0x19, 0xb9, 0x19, 0x11, 0x80, 0x30, 0x9b, 0x07, 0x59, 0x5c, 0x88, 0x08, 0xbd, 0x22,
		0x20, 0xb6, 0x98, 0x04, 0xb1, 0xe6, 0xc3, 0xd9, 0x72, 0x4a, 0xa8, 0xe2, 0x6a, 0x98, 0x6a, 0xb4,
		0x34, 0x94, 0x08, 0x98, 0xa3, 0x43, 0xb2, 0xbd, 0x46, 0x78, 0xcd, 0x04, 0x04, 0x00, 0x00, 0xff,
		0xff, 0x1d, 0x84, 0x0c, 0xde, 0x5a, 0x01, 0x00, 0x00,
	}
	buf, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		panic(err)
	}
	dec := gob.NewDecoder(buf)
	if err := dec.Decode(&tab); err != nil {
		panic(err)
	}
	for i := 0; i < numStates; i++ {
		for j := 0; j < numNTSymbols; j++ {
			gotoTab[i][j] = tab[i][j]
		}
	}
}
